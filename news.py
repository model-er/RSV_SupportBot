import telebot
import config
import sqlite3
import re
from telebot import types

#clients = [1269424044]
bot = telebot.TeleBot(config.token)
admins = []
GROUP_CV_ID = -4695163369
GROUP_ID = -1002663440792
CHANNEL_USERNAME = "@lilalylove"

conn = sqlite3.connect("users.db", check_same_thread= False)
cur = conn.cursor()

cur.execute("CREATE TABLE IF NOT EXISTS users(id INT);")
cur.execute('''
CREATE TABLE IF NOT EXISTS feedbacks (
    user_id INTEGER PRIMARY KEY,
    feedback TEXT,
    is_sent INTEGER DEFAULT 0
)
''')
conn.commit()

link = ""
text = ""

def is_user_subscribed(user_id):
    try:
        member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'creator', 'administrator']
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}')
        return False

@bot.message_handler(commands=['help', 'start'])
def start(message):
    global admins
    user_id = message.from_user.id
    if is_user_subscribed(user_id):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("\U0001F4C4 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–µ —Ä–µ–∑—é–º–µ", "\U0001F4EC –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–¥–±—ç–∫")
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª –∏ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", reply_markup=markup)
        # –¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã
        help_user(message)
    else:
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME.strip('@')}")
        markup.add(btn)
        bot.send_message(user_id, "üòï –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.", reply_markup=markup)
    if message.chat.id in admins:
        help(message)
    try:
        # clients.append(message.chat.id)
        id = message.chat.id
        info = cur.execute("SELECT * FROM users WHERE id = ?", (id,)).fetchall()
        if not info:
            cur.execute(f"INSERT INTO users (id) VALUES ({id})")
            conn.commit()
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã  –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É!")
        else:
            pass
    except:
        pass
def help_user(message):
    user_markup = types.ReplyKeyboardMarkup()
    user_markup .add(types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç"))
    user_markup .add(types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É"))
    user_markup .add(types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"))
    user_markup .add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"))
    user_markup.add(types.KeyboardButton(text="–ú–µ–Ω—é"))
    bot.send_message(message.chat.id,
                     "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\
/start - –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n\
/menu - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã \n\
–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é.\n",
                     reply_markup=admin_markup)
def help(message):
    admin_markup = types.ReplyKeyboardMarkup()
    admin_markup.add(types.KeyboardButton(text = "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç"))
    admin_markup.add(types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É"))
    admin_markup.add(types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"))
    admin_markup.add(types.KeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"))
    admin_markup.add(types.KeyboardButton(text="–ü–æ–º–æ—â—å"))
    bot.send_message(message.chat.id,
                     "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\
/edit_message - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏\n\
/edit_link - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –∫ —Ç–µ–∫—Å—Ç—É —Ä–∞—Å—Å—ã–ª–∫–∏\n\
/show - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\
/send - –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ \n\
/help - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã \n\
–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é.\n",
                     reply_markup=admin_markup)

@bot.message_handler(func=lambda m: m.text == "\U0001F4C4 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–µ —Ä–µ–∑—é–º–µ")
def ask_resume(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª —Å —Ä–µ–∑—é–º–µ (PDF, DOC –∏ —Ç.–ø.).")


@bot.message_handler(content_types=['document'])
def handle_resume(message):
    user = message.from_user
    caption = f"\U0001F4C4 –†–µ–∑—é–º–µ –æ—Ç @{user.username or user.first_name} (ID: {user.id})"
    try:
        bot.send_document(GROUP_CV_ID, message.document.file_id, caption=caption)
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –†–µ–∑—é–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–∞–º. –û–∂–∏–¥–∞–π —Ñ–∏–¥–±—ç–∫.")
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        print("–û—à–∏–±–∫–∞:", e)


@bot.message_handler(func=lambda m: m.chat.id == GROUP_CV_ID and m.reply_to_message is not None)
def handle_expert_reply(message):
    original = message.reply_to_message
    match = re.search(r"ID: (\d+)", original.caption or original.text or "")
    if match:
        user_id = int(match.group(1))
        feedback_text = message.text
        cur.execute("REPLACE INTO feedbacks (user_id, feedback, is_sent) VALUES (?, ?, ?)", (user_id, feedback_text, 0))
        conn.commit()
        try:
            bot.send_message(user_id, f"\U0001F4DD –¢–≤–æ–π —Ñ–∏–¥–±—ç–∫ –≥–æ—Ç–æ–≤:\n\n{feedback_text}")
            cur.execute("UPDATE feedbacks SET is_sent = 1 WHERE user_id = ?", (user_id,))
            conn.commit()
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–¥–±—ç–∫–∞:", e)
    else:
        bot.send_message(GROUP_CV_ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–¥–±—ç–∫–∞.")


@bot.message_handler(func=lambda m: m.text == "\U0001F4EC –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–¥–±—ç–∫")
def show_feedback(message):
    user_id = message.from_user.id
    cur.execute("SELECT feedback FROM feedbacks WHERE user_id = ?", (user_id,))
    result = cur.fetchone()
    if result:
        bot.send_message(user_id, f"\U0001F4AC –í–æ—Ç —Ç–≤–æ–π —Ñ–∏–¥–±—ç–∫ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞:\n\n{result[0]}")
    else:
        bot.send_message(user_id, "\u23F3 –ü–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–¥–±—ç–∫–∞. –û–Ω –ø–æ—è–≤–∏—Ç—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–µ—Ä—Ç –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç.")


@bot.message_handler(commands=['get_id'])
def get_id(message):
    bot.send_message(message.chat.id, "–í–∞—à–µ id:" + str(message.chat.id))

@bot.message_handler(commands=['test'])
def test_command(message):
    bot.send_message(message.chat.id, "–Ø –≤–∏–∂—É –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É!")

@bot.message_handler(commands= ["edit_message"])
def edit_message(message):
    if message.chat.id in admins:
        m = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(m, add_text)
def add_text(message):
    global text
    text = message.text
    if text not in ["–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "–ü–æ–º–æ—â—å"]:
        bot.send_message(message.chat.id, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ")
        bot.send_message(message.chat.id, text)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞!")
@bot.message_handler(commands= ["edit_link"])
def edit_link(message):
    if message.chat.id in admins:
        m = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—Å—ã–ª–∫—É:")
        bot.register_next_step_handler(m, add_link)

def add_link(message):
    global link
    if message.text is not None:
        link=message.text
        bot.send_message(message.chat.id, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: ")
        bot.send_message(message.chat.id, link)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞! ")
        m = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—Å—ã–ª–∫—É:")
        bot.register_next_step_handler(m, add_link)

# @bot.message_handler(commands= ["send"])
# def send_message(message):
#     global text
#     global link
#     if text != "":
#         if link != "":
#             for i in clients:
#                 sending(i)
#             else:
#                 text = ""
#                 link =""
#         else:
#             bot.send_message(message.chat.id, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Å—ã–ª–∫–∞!")
#     else:
#         bot.send_message(message.chat.id, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç!")
#
# def sending(client_id):
#     global link
#     try:
#        markup_keyboard =types.InlineKeyboardMarkup()
#        link_button = types.InlineKeyboardButton(text= "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç", url = link)
#        markup_keyboard.add(link_button)
#        bot.send_message(client_id, text, reply_markup=markup_keyboard)
#     except:
#         pass

@bot.message_handler(commands=["send"])
def send_message(message):
    if message.chat.id in admins:
        global link
        global text
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data = "go"))
        markup.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
        if text and link:
            bot.send_message(message.chat.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Å—Å—ã–ª–∫–∞")

def send():
    global text
    global link
    if text and link:
        inline_keyboard = types.InlineKeyboardMarkup()
        inline_keyboard.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", url=link))
        cur.execute("SELECT id FROM users")
        massive = cur.fetchall()
        for i in massive:
            id = i[0]
            try:
                bot.send_message(id, text, reply_markup=inline_keyboard)
            except:
                pass
        else:
            pass

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "go":
        send()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å", reply_markup=None)
    elif call.data == "cancel":
        bot.answer_callback_query(call.id, show_alert=True, text = "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.edit_message_text(chat_id=call.message.chat.id, message_id= call.message.message_id, text = "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. \n–¢–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=None)

@bot.message_handler(content_types=["text"])
def info(message):
    if message.chat.id == GROUP_ID:
        if message.text.lower() == "–ø—Ä–∏–≤–µ—Ç":
            user_id = message.from_user.id
            if is_user_subscribed(user_id):
                bot.send_message(user_id, "üéÅ –í–æ—Ç –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!")
            else:
                bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.")
    if message.chat.id in admins:
        if message.text =="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç":
            m= bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
            bot.register_next_step_handler(m, add_text)
        elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É":
            m = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏")
            bot.register_next_step_handler(m, add_link)
        elif message.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
            show(message)
        elif message.text == "–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
            global link
            global text
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="go"))
            markup.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
            if text and link:
                bot.send_message(message.chat.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=markup)
            else:
                bot.send_message(message.chat.id, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Å—Å—ã–ª–∫–∞")
        elif message.text == "–ü–æ–º–æ—â—å":
            help(message)
        else:
            help(message)



def is_valid_url(url):
    return re.match(r'^https?:\/\/', url) is not None

@bot.message_handler(commands= ["show"])
def show_message(message):
    if message.chat.id in admins:
        bot.register_next_step_handler(message, show)

def show(message):
    global text
    global link
    if not is_valid_url(link):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
        return
    markup=types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", url=link))
    bot.send_message(message.chat.id, "–í–∞—à–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–æ—Ç —Ç–∞–∫)")
    bot.send_message(message.chat.id, text, reply_markup=markup)


bot.infinity_polling(skip_pending=True)



